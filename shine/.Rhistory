input$decimal,
paste(input$range, collapse=' '),
input$format,
input$animation)),
stringsAsFactors=FALSE)
})
# Show the values using an HTML table
output$values <- renderTable({
sliderValues()
})
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui <-fluidPage(
#  Application title
titlePanel("Sliders"),
# Sidebar with sliders that demonstrate various available
# options
sidebarLayout(
sidebarPanel(
# Simple integer interval
sliderInput("integer", "Integer:",
min=0, max=1000, value=500),
# Decimal interval with step value
sliderInput("decimal", "Decimal:",
min = 0, max = 1, value = 0.5, step= 0.1),
# Specification of range within an interval
sliderInput("range", "Range:",
min = 1, max = 1000, value = c(200,500)),
# Provide a custom currency format for value display,
# with basic animation
sliderInput("format", "Custom Format:",
min = 0, max = 10000, value = 0, step = 2500,
format="$#,##0", locale="us", animate=TRUE),
# Animation with custom interval (in ms) to control speed,
# plus looping
sliderInput("animation", "Looping Animation:", 1, 2000, 1,
step = 10, animate=
animationOptions(interval=300, loop=TRUE))
),
# Show a table summarizing the values entered
mainPanel(
tableOutput("values")
)
)
))
)
server<-function(input,output) {
# Reactive expression to compose a data frame containing all of
# the values
sliderValues <- reactive({
# Compose data frame
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range, collapse=' '),
input$format,
input$animation)),
stringsAsFactors=FALSE)
})
# Show the values using an HTML table
output$values <- renderTable({
sliderValues()
})
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui <-fluidPage(
#  Application title
titlePanel("Sliders"),
# Sidebar with sliders that demonstrate various available
# options
sidebarLayout(
sidebarPanel(
# Simple integer interval
sliderInput("integer", "Integer:",
min=0, max=1000, value=500),
# Decimal interval with step value
sliderInput("decimal", "Decimal:",
min = 0, max = 1, value = 0.5, step= 0.1),
# Specification of range within an interval
sliderInput("range", "Range:",
min = 1, max = 1000, value = c(200,500)),
# Provide a custom currency format for value display,
# with basic animation
sliderInput("format", "Custom Format:",
min = 0, max = 10000, value = 0, step = 2500,
format="$#,##0", locale="us", animate=TRUE),
# Animation with custom interval (in ms) to control speed,
# plus looping
sliderInput("animation", "Looping Animation:", 1, 2000, 1,
step = 10, animate=
animationOptions(interval=300, loop=TRUE))
),
# Show a table summarizing the values entered
mainPanel(
tableOutput("values")
)
)
))
)
server<-function(input,output) {
# Reactive expression to compose a data frame containing all of
# the values
sliderValues <- reactive({
# Compose data frame
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range, collapse=' '),
input$format,
input$animation)),
stringsAsFactors=FALSE)
})
# Show the values using an HTML table
output$values <- renderTable({
sliderValues()
})
})
shinyApp(ui=ui,server=server)
library(shiny)
ui <-fluidPage(
#  Application title
titlePanel("Sliders"),
# Sidebar with sliders that demonstrate various available
# options
sidebarLayout(
sidebarPanel(
# Simple integer interval
sliderInput("integer", "Integer:",
min=0, max=1000, value=500),
# Decimal interval with step value
sliderInput("decimal", "Decimal:",
min = 0, max = 1, value = 0.5, step= 0.1),
# Specification of range within an interval
sliderInput("range", "Range:",
min = 1, max = 1000, value = c(200,500)),
# Provide a custom currency format for value display,
# with basic animation
sliderInput("format", "Custom Format:",
min = 0, max = 10000, value = 0, step = 2500,
format="$#,##0", locale="us", animate=TRUE),
# Animation with custom interval (in ms) to control speed,
# plus looping
sliderInput("animation", "Looping Animation:", 1, 2000, 1,
step = 10, animate=
animationOptions(interval=300, loop=TRUE))
),
# Show a table summarizing the values entered
mainPanel(
tableOutput("values")
)
)
))
)
server<-function(input,output) {
# Reactive expression to compose a data frame containing all of
# the values
sliderValues <- reactive({
# Compose data frame
data.frame(
Name = c("Integer",
"Decimal",
"Range",
"Custom Format",
"Animation"),
Value = as.character(c(input$integer,
input$decimal,
paste(input$range, collapse=' '),
input$format,
input$animation)),
stringsAsFactors=FALSE)
})
# Show the values using an HTML table
output$values <- renderTable({
sliderValues()
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){}
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){
output$hist<-renderPlot({
title<-"100 random number"
hist(rnorm(100),main=title)}
)
}
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num)}
)
})
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num))}
)
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num))}
)
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num))
})library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num))
})library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
Server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui=ui,server=server)
library(shiny)
ui<- fluidPage(
sliderInput(inputId="num", label="Choose A Number",
value=25,min=1,max=100),
plotOutput("hist")
)
server<-function(input,output){
output$hist<-renderPlot({
hist(rnorm(input$num))
})
}
shinyApp(ui=ui,server=server)
shiny::runApp('C:/Users/sanjivek/OneDrive/Documents/Cuny Assignments/Project')
shiny::runApp('C:/Users/sanjivek/OneDrive/Documents/Cuny Assignments/Project')
shiny::runApp('C:/Users/sanjivek/OneDrive/Documents/Cuny Assignments/Project')
shiny::runApp('C:/Users/sanjivek/OneDrive/Documents/Cuny Assignments/Project')
install.packages("maps")
install.packages("mapproj")
library(shiny)
library(maps)
library(mapproj)
midwest <- read.csv(file="midwest.csv", header=TRUE, sep=",")
head(midwest)
midwest <- read.csv(file="/midwest.csv", header=TRUE, sep=",")
library(shiny)
library(maps)
library(mapproj)
midwest <- read.csv(file="C:\Users\sanjivek\OneDrive\Documents\Cuny Assignments\Project\midwest.csv", header=TRUE, sep=",")
head(midwest)
library(shiny)
library(maps)
library(mapproj)
midwest <- read.csv(file="C:\Users\sanjivek\OneDrive\Documents\Cuny Assignments\Project\midwest.csv", header=TRUE, sep=",")
head(midwest)
library(shiny)
library(maps)
library(mapproj)
midwest <- read.csv(file="C:\Users\sanjivek\OneDrive\Documents\Cuny Assignments\Project\midwest.csv", header=TRUE, sep=",")
head(midwest)
library(shiny)
library(maps)
library(mapproj)
midwest <- read.csv(file="C:\Users\sanjivek\Desktop\CUNY Admission\Project\midwest.csv", header=TRUE, sep=",")
head(midwest)
library(shiny)
library(maps)
library(mapproj)
midwest <- read.csv(file="C:\Users\sanjivek\Desktop\CUNY_Admission\Project\midwest.csv", header=TRUE, sep=",")
head(midwest)
library(shiny)
library(maps)
library(mapproj)
midwest <- read.csv(file="C:\Users\sanjivek\Desktop\CUNY_Admission\Project\midwest.csv", header=TRUE, sep=",")
head(midwest)
install.packages("reshape2")
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
?as.character
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp()
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
---
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
p
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
install.packages("arrangeGrob")
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
install.packages("grid", dependencies = FALSE)
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
install.packages("grid")
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
install.packages("gridExtra")
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
install.packages("Rcpp")
library("grid", lib.loc="C:/Program Files/R/R-3.2.1/library")
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
shiny::runApp('C:/Users/sanjivek/Desktop/shine')
